// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// haversine
double haversine(double lat1, double lon1, double lat2, double lon2);
RcppExport SEXP _kfbmisc_haversine(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< double >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< double >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< double >::type lon2(lon2SEXP);
    rcpp_result_gen = Rcpp::wrap(haversine(lat1, lon1, lat2, lon2));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_haversine_mat
NumericMatrix rcpp_haversine_mat(NumericVector lon1, NumericVector lat1, NumericVector lon2, NumericVector lat2);
RcppExport SEXP _kfbmisc_rcpp_haversine_mat(SEXP lon1SEXP, SEXP lat1SEXP, SEXP lon2SEXP, SEXP lat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_haversine_mat(lon1, lat1, lon2, lat2));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_haversine_mat_symmetric
NumericMatrix rcpp_haversine_mat_symmetric(NumericVector lon1, NumericVector lat1, NumericVector lon2, NumericVector lat2);
RcppExport SEXP _kfbmisc_rcpp_haversine_mat_symmetric(SEXP lon1SEXP, SEXP lat1SEXP, SEXP lon2SEXP, SEXP lat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_haversine_mat_symmetric(lon1, lat1, lon2, lat2));
    return rcpp_result_gen;
END_RCPP
}
// dist_haversine
double dist_haversine(double lon_x, double lat_x, double lon_y, double lat_y);
RcppExport SEXP _kfbmisc_dist_haversine(SEXP lon_xSEXP, SEXP lat_xSEXP, SEXP lon_ySEXP, SEXP lat_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lon_x(lon_xSEXP);
    Rcpp::traits::input_parameter< double >::type lat_x(lat_xSEXP);
    Rcpp::traits::input_parameter< double >::type lon_y(lon_ySEXP);
    Rcpp::traits::input_parameter< double >::type lat_y(lat_ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_haversine(lon_x, lat_x, lon_y, lat_y));
    return rcpp_result_gen;
END_RCPP
}
// dist_spherical_cosine
double dist_spherical_cosine(double lon_x, double lat_x, double lon_y, double lat_y);
RcppExport SEXP _kfbmisc_dist_spherical_cosine(SEXP lon_xSEXP, SEXP lat_xSEXP, SEXP lon_ySEXP, SEXP lat_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lon_x(lon_xSEXP);
    Rcpp::traits::input_parameter< double >::type lat_x(lat_xSEXP);
    Rcpp::traits::input_parameter< double >::type lon_y(lon_ySEXP);
    Rcpp::traits::input_parameter< double >::type lat_y(lat_ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_spherical_cosine(lon_x, lat_x, lon_y, lat_y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parallel_distm_C
NumericMatrix rcpp_parallel_distm_C(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _kfbmisc_rcpp_parallel_distm_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parallel_distm_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parallel_distm_C_min
IntegerVector rcpp_parallel_distm_C_min(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _kfbmisc_rcpp_parallel_distm_C_min(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parallel_distm_C_min(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parallel_nearest_facility
NumericMatrix rcpp_parallel_nearest_facility(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _kfbmisc_rcpp_parallel_nearest_facility(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parallel_nearest_facility(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kfbmisc_haversine", (DL_FUNC) &_kfbmisc_haversine, 4},
    {"_kfbmisc_rcpp_haversine_mat", (DL_FUNC) &_kfbmisc_rcpp_haversine_mat, 4},
    {"_kfbmisc_rcpp_haversine_mat_symmetric", (DL_FUNC) &_kfbmisc_rcpp_haversine_mat_symmetric, 4},
    {"_kfbmisc_dist_haversine", (DL_FUNC) &_kfbmisc_dist_haversine, 4},
    {"_kfbmisc_dist_spherical_cosine", (DL_FUNC) &_kfbmisc_dist_spherical_cosine, 4},
    {"_kfbmisc_rcpp_parallel_distm_C", (DL_FUNC) &_kfbmisc_rcpp_parallel_distm_C, 2},
    {"_kfbmisc_rcpp_parallel_distm_C_min", (DL_FUNC) &_kfbmisc_rcpp_parallel_distm_C_min, 2},
    {"_kfbmisc_rcpp_parallel_nearest_facility", (DL_FUNC) &_kfbmisc_rcpp_parallel_nearest_facility, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_kfbmisc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
